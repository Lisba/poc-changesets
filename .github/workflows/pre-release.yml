name: Pre-release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Install dependencies
        run: npm ci

      - name: Get next version from changesets
        id: changesets
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # If the current branch is not main, use the latest tag as the base reference.
          if [[ "$CURRENT_BRANCH" == "main" ]]; then
            CHANGESET_OUTPUT=$(npx changeset status --verbose | sed 's/\x1b\[[0-9;]*m//g' | sed 's/ðŸ¦‹  //g' | grep -v "\.changeset/.*\.md")
          else
            BASE_REF=$(git describe --tags --abbrev=0)
            CHANGESET_OUTPUT=$(npx changeset status --verbose --since $BASE_REF | sed 's/\x1b\[[0-9;]*m//g' | sed 's/ðŸ¦‹  //g' | grep -v "\.changeset/.*\.md")
          fi
          
          if ! echo "$CHANGESET_OUTPUT" | grep -q "Packages to be bumped at"; then
            echo "No pending changesets to generate a new version"
            exit 1
          fi
          
          CORE_VERSION=$(echo "$CHANGESET_OUTPUT" | grep "@poc-changesets/core" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -n1)
              
          if [ -z "$CORE_VERSION" ]; then
            echo "CORE_VERSION is empty, building TAG_SUFFIX"
            TAG_SUFFIX=""
            for PKG in package-a package-b; do
              echo "Checking package: $PKG"
              PKG_VERSION=$(echo "$CHANGESET_OUTPUT" | grep "@poc-changesets/$PKG" | awk '{print $NF}')
              echo "PKG_VERSION for $PKG: $PKG_VERSION"
              if [ ! -z "$PKG_VERSION" ]; then
                PKG_LETTER=${PKG: -1}  # Gets 'a' or 'b'
                TAG_SUFFIX="${TAG_SUFFIX}-${PKG_LETTER}${PKG_VERSION}"
                echo "Current TAG_SUFFIX: $TAG_SUFFIX"
              fi
            done
            
            CORE_VERSION=$(node -p "require('./packages/core/package.json').version")
            NEW_VERSION="v${CORE_VERSION}${TAG_SUFFIX}"
          else
            NEW_VERSION="v${CORE_VERSION}"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          {
            echo "changeset_output<<EOF"
            echo "$CHANGESET_OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          VERSION=${{ steps.changesets.outputs.new_version }}
          BRANCH_NAME="release/$VERSION"
          
          git switch -c $BRANCH_NAME
          git push -u origin HEAD
          
          echo "Branch $BRANCH_NAME created and pushed to GitHub."
          echo "Use the tag $VERSION to create the next release in GitHub."

      - name: Bump version
        run: npm run changeset:version

      - name: Commit version bump
        run: |
          git add -A
          git commit -m "Automated-action: version packages updated for ${{ steps.changesets.outputs.new_version }}"
          git push -u origin HEAD

      - name: Create Release Draft
        uses: actions/github-script@v7
        with:
          script: |
            const releaseName = `${{ steps.changesets.outputs.new_version }}`;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: releaseName,
              target_commitish: `release/${releaseName}`,
              name: `Release ${releaseName}`,
              body: `## Changes in this Release\n\n${{ steps.changesets.outputs.changeset_output }}`,
              draft: true
            });